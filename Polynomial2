/* Tekhong Meach
 * Worksheet 1
 * This program extends a Polynomial class (authored by Sedgewick and Wayne) to 
 * implement a new slow_evaluate() method and utilizes Javaâ€™s built-in timing 
 * mechanisms to time these two polynomial evaluation methods and compare their runtime.
 */

// Modified from the Polynomials class at
// http://introcs.cs.princeton.edu/java/92symbolic/Polynomial.java.html

public class Polynomial2 {
    private int[] coef;  // coefficients
    private int deg;     // degree of polynomial (0 for the zero polynomial)

    // a * x^b
    public Polynomial2(int a, int b) {
        coef = new int[b+1];
        coef[b] = a;
        deg = degree();
    }

    // return the degree of this polynomial (0 for the zero polynomial)
    public int degree() {
        int d = 0;
        for (int i = 0; i < coef.length; i++)
            if (coef[i] != 0) d = i;
        return d;
    }

    // return c = a + b
    public Polynomial2 plus(Polynomial2 b) {
        Polynomial2 a = this;
        Polynomial2 c = new Polynomial2(0, Math.max(a.deg, b.deg));
        for (int i = 0; i <= a.deg; i++) c.coef[i] += a.coef[i];
        for (int i = 0; i <= b.deg; i++) c.coef[i] += b.coef[i];
        c.deg = c.degree();
        return c;
    }

    // return (a - b)
    public Polynomial2 minus(Polynomial2 b) {
        Polynomial2 a = this;
        Polynomial2 c = new Polynomial2(0, Math.max(a.deg, b.deg));
        for (int i = 0; i <= a.deg; i++) c.coef[i] += a.coef[i];
        for (int i = 0; i <= b.deg; i++) c.coef[i] -= b.coef[i];
        c.deg = c.degree();
        return c;
    }

    // return (a * b)
    public Polynomial2 times(Polynomial2 b) {
        Polynomial2 a = this;
        Polynomial2 c = new Polynomial2(0, a.deg + b.deg);
        for (int i = 0; i <= a.deg; i++)
            for (int j = 0; j <= b.deg; j++)
                c.coef[i+j] += (a.coef[i] * b.coef[j]);
        c.deg = c.degree();
        return c;
    }

    // return a(b(x))  - compute using Horner's method
    public Polynomial2 compose(Polynomial2 b) {
        Polynomial2 a = this;
        Polynomial2 c = new Polynomial2(0, 0);
        for (int i = a.deg; i >= 0; i--) {
            Polynomial2 term = new Polynomial2(a.coef[i], 0);
            c = term.plus(b.times(c));
        }
        return c;
    }


    // do a and b represent the same polynomial?
    public boolean eq(Polynomial2 b) {
        Polynomial2 a = this;
        if (a.deg != b.deg) return false;
        for (int i = a.deg; i >= 0; i--)
            if (a.coef[i] != b.coef[i]) return false;
        return true;
    }


    // use Horner's method to compute and return the polynomial evaluated at x
    public int evaluate(int x) {
        int p = 0;
        for (int i = deg; i >= 0; i--)
            p = coef[i] + (x * p);
        return p;
    }
    
    
    
    
    
    // a new method to evaluate polynomials
    public int slow_evaluate(double x) {
    	int polynomial_value = 0;
		for (int i = this.deg; i >=0 ; i--) {
			polynomial_value += coef[i]*Math.pow(x,i);
		}
		return polynomial_value;
    }
    
    
    
    
    

    // differentiate this polynomial and return it
    public Polynomial2 differentiate() {
        if (deg == 0) return new Polynomial2(0, 0);
        Polynomial2 deriv = new Polynomial2(0, deg - 1);
        deriv.deg = deg - 1;
        for (int i = 0; i < deg; i++)
            deriv.coef[i] = (i + 1) * coef[i + 1];
        return deriv;
    }

    // convert to string representation
    public String toString() {
        if (deg ==  0) return "" + coef[0];
        if (deg ==  1) return coef[1] + "x + " + coef[0];
        String s = coef[deg] + "x^" + deg;
        for (int i = deg-1; i >= 0; i--) {
            if      (coef[i] == 0) continue;
            else if (coef[i]  > 0) s = s + " + " + ( coef[i]);
            else if (coef[i]  < 0) s = s + " - " + (-coef[i]);
            if      (i == 1) s = s + "x";
            else if (i >  1) s = s + "x^" + i;
        }
        return s;
    }


    public static void main(String[] args) { 
    	
    	Polynomial2 a1 = new Polynomial2(2, 3);
        Polynomial2 a2 = new Polynomial2(-4, 2);
        Polynomial2 a3 = new Polynomial2(3, 1);
        Polynomial2 a4 = new Polynomial2(-1, 0);
        
        Polynomial2 a    = a1.plus(a2).plus(a3).plus(a4);
        System.out.println("a(x) = " + a);
        
    	long startTime = System.nanoTime();
    	System.out.println("a(3.0) = " + a.evaluate(3));
    	long endTime = System.nanoTime();
    	System.out.println("That took " + (endTime - startTime) + " nanoseconds.");
    
    	long startTime1 = System.nanoTime();
    	System.out.println("a(3.0) = " + a.slow_evaluate(3));
    	long endTime1 = System.nanoTime();
    	System.out.println("That took " + (endTime1 - startTime1) + " nanoseconds.");
         
   }

}
